import AbstractScraper from './AbstractScraper'

class AbstractStatementScraper extends AbstractScraper {
  /**
   * The source is the specific context in which the statement appeared, as opposed to the platform
   * it was delivered via or the speaker who delivered it. For example, on TV, this would be a show
   * title; on social media, it would be the username of the poster.
   *
   * OVERRIDE WHEN EXTENDING
   *
   * @param {String} statement The scraped statement, which may be needed
   * @return {String}          The source for the statement
   */
  // (this is an abstract method and we need to define its footprint.)
  // eslint-disable-next-line no-unused-vars
  getStatementSource = (statement) => {
    throw new Error('You implemented a statement scraper but forgot to define the getStatementSource.')
  }

  /**
   * The canonical URL is the URL the user would consult to view the statement in context. It will
   * sometimes differ from the scrape URL, such as when using an API to access the statements.
   *
   * OVERRIDE WHEN EXTENDING
   *
   * @param {String} statement The scraped statement, which may be needed
   * @return {String}          The canonical URL for the statement
   */
  // (this is an abstract method and we need to define its footprint.)
  // eslint-disable-next-line no-unused-vars
  getStatementCanonicalUrl = (statement) => {
    throw new Error('You implemented a statement scraper but forgot to define the getStatementCanonicalUrl.')
  }

  /**
   * Statement scrapers are designed to extract statements from the scraped page.
   *
   * Each statement scraper that extends AbstractStatementScraper needs to implement
   * its own statementScrapeHandler method.
   *
   * OVERRIDE WHEN EXTENDING
   *
   * @param {String} responseString The HTML or JSON that came from the HTTP request
   * @return {Object[]}             The list of statements that were scraped
   */
  // (this is an abstract method and we need to define its footprint.)
  // eslint-disable-next-line no-unused-vars
  statementScrapeHandler = (responseString) => {
    throw new Error('You implemented a statement scraper but forgot to define the statementScrapeHandler.')
  }

  /**
   * Statements share common properties that are generated by predictable methods. Here we generate
   * and apply all these additional properties.
   *
   * @param {Object[]} statements The statements that have been scraped
   * @return {Object[]}           Those same statements with additional schema properties added
   */
  addSchemaPropertiesToStatements = statements => statements
    .map(statement => ({
      ...statement,
      scraperName: this.getScraperName(),
      canonicalUrl: this.getStatementCanonicalUrl(),
      source: this.getStatementSource(),
    }))


  scrapeHandler = (responseString) => {
    const statements = this.statementScrapeHandler(responseString)
    const statementsWithCompletedSchemas = this.addSchemaPropertiesToStatements(statements)
    return statementsWithCompletedSchemas
  }
}

export default AbstractStatementScraper
